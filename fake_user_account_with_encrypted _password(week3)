

const { MongoClient, ServerApiVersion, ObjectId } = require('mongodb');
const uri = "mongodb+srv://m001-student:m001-mongodb-basics@sandbox.lhdjj.mongodb.net/myFirstDatabase?retryWrites=true&w=majority";
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1 });

const { faker } = require('@faker-js/faker');
const bcrypt = require("bcryptjs");
const userName = faker.name.findName(); 
const Email = faker.internet.email();
const password = "mypass1234";
const saltRounds = 10;
//var encryptedPassword; //var used to declare a variable ~ can be updated and re-declared into the scope
let encryptedPassword;   //let is an improved version of the var ~ can be updated but cannot be re-declared into the scope.

bcrypt.genSalt(saltRounds, function (saltError, salt) {
  if (saltError) {
    throw saltError
  } else {
    bcrypt.hash(password, salt, function(hashError, hash) {
      if (hashError) {
        throw hashError
      } else {
          encryptedPassword=hash;
          console.log("Hash:",hash);
        
      }
    })
  }
})
 
    client.connect(async err => {
       if(err) {
             console.log(err.message)
             return
    }
    console.log('Connected to MongoDB');

    client.db('Faker_Demo').collection('User_details').insertOne({name: userName, email :Email, password: encryptedPassword }).then(result => {
        console.log(result);
    })
    
    console.log('Successfully fake user account with encypted password was inserted in mongoDB'); 
});
